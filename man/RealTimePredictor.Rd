% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predictor.R
\name{RealTimePredictor}
\alias{RealTimePredictor}
\title{Make prediction requests to an Amazon SageMaker endpoint.}
\description{
Make prediction requests to an Amazon SageMaker endpoint.

Make prediction requests to an Amazon SageMaker endpoint.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RealTimePredictor$new()}}
\item \href{#method-predict}{\code{RealTimePredictor$predict()}}
\item \href{#method-delete_endpoint}{\code{RealTimePredictor$delete_endpoint()}}
\item \href{#method-delete_model}{\code{RealTimePredictor$delete_model()}}
\item \href{#method-enable_data_capture}{\code{RealTimePredictor$enable_data_capture()}}
\item \href{#method-disable_data_capture}{\code{RealTimePredictor$disable_data_capture()}}
\item \href{#method-update_data_capture_config}{\code{RealTimePredictor$update_data_capture_config()}}
\item \href{#method-list_monitor}{\code{RealTimePredictor$list_monitor()}}
\item \href{#method-clone}{\code{RealTimePredictor$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a ``RealTimePredictor``.
             Behavior for serialization of input data and deserialization of
             result data can be configured through initializer arguments. If not
             specified, a sequence of bytes is expected and the API sends it in the
             request body without modifications. In response, the API returns the
             sequence of bytes from the prediction result without any modifications.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RealTimePredictor$new(
  endpoint,
  sagemaker_session = NULL,
  serializer = csv_serializer,
  deserializer = csv_deserializer,
  content_type = NULL,
  accept = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{endpoint}}{(str): Name of the Amazon SageMaker endpoint to which
requests are sent.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): A SageMaker Session
object, used for SageMaker interactions (default: NULL). If not
specified, one is created using the default AWS configuration
chain.}

\item{\code{serializer}}{(callable): Accepts a single argument, the input data,
and returns a sequence of bytes. It may provide a
``content_type`` attribute that defines the endpoint request
content type. If not specified, a sequence of bytes is expected
for the data. (default: ``csv_serializer``)}

\item{\code{deserializer}}{(callable): Accepts two arguments, the result data and
the response content type, and returns a sequence of bytes. It
may provide a ``content_type`` attribute that defines the
endpoint response's "Accept" content type. If not specified, a
sequence of bytes is expected for the data. (default: ``csv_deserializer``)}

\item{\code{content_type}}{(str): The invocation's "ContentType", overriding any
``content_type`` from the serializer (default: NULL).}

\item{\code{accept}}{(str): The invocation's "Accept", overriding any accept from
the deserializer (default: NULL).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-predict"></a>}}
\if{latex}{\out{\hypertarget{method-predict}{}}}
\subsection{Method \code{predict()}}{
Return the inference from the specified endpoint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RealTimePredictor$predict(
  data,
  initial_args = NULL,
  target_model = NULL,
  target_variant = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(object): Input data for which you want the model to provide
inference. If a serializer was specified when creating the
RealTimePredictor, the result of the serializer is sent as input
data. Otherwise the data must be sequence of bytes, and the
predict method then sends the bytes in the request body as is.}

\item{\code{initial_args}}{(list[str,str]): Optional. Default arguments for boto3
``invoke_endpoint`` call. Default is NULL (no default
arguments).}

\item{\code{target_model}}{(str): S3 model artifact path to run an inference request on,
in case of a multi model endpoint. Does not apply to endpoints hosting
single model (Default: NULL)}

\item{\code{target_variant}}{(str): The name of the production variant to run an inference
request on (Default: NULL). Note that the ProductionVariant identifies the model
you want to host and the resources you want to deploy for hosting it.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
object: Inference for the given input. If a deserializer was specified when creating
             the RealTimePredictor, the result of the deserializer is
             returned. Otherwise the response returns the sequence of bytes
             as is.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete_endpoint"></a>}}
\if{latex}{\out{\hypertarget{method-delete_endpoint}{}}}
\subsection{Method \code{delete_endpoint()}}{
Delete the Amazon SageMaker endpoint backing this predictor. Also
             delete the endpoint configuration attached to it if
             delete_endpoint_config is True.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RealTimePredictor$delete_endpoint(delete_endpoint_config = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{delete_endpoint_config}}{(bool, optional): Flag to indicate whether to
delete endpoint configuration together with endpoint. Defaults
to True. If True, both endpoint and endpoint configuration will
be deleted. If False, only endpoint will be deleted.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete_model"></a>}}
\if{latex}{\out{\hypertarget{method-delete_model}{}}}
\subsection{Method \code{delete_model()}}{
Deletes the Amazon SageMaker models backing this predictor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RealTimePredictor$delete_model()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-enable_data_capture"></a>}}
\if{latex}{\out{\hypertarget{method-enable_data_capture}{}}}
\subsection{Method \code{enable_data_capture()}}{
Updates the DataCaptureConfig for the Predictor's associated Amazon SageMaker Endpoint
             to enable data capture. For a more customized experience, refer to
             update_data_capture_config, instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RealTimePredictor$enable_data_capture()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-disable_data_capture"></a>}}
\if{latex}{\out{\hypertarget{method-disable_data_capture}{}}}
\subsection{Method \code{disable_data_capture()}}{
Updates the DataCaptureConfig for the Predictor's associated Amazon SageMaker Endpoint
             to disable data capture. For a more customized experience, refer to
             update_data_capture_config, instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RealTimePredictor$disable_data_capture()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_data_capture_config"></a>}}
\if{latex}{\out{\hypertarget{method-update_data_capture_config}{}}}
\subsection{Method \code{update_data_capture_config()}}{
Updates the DataCaptureConfig for the Predictor's associated Amazon SageMaker Endpoint
             with the provided DataCaptureConfig.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RealTimePredictor$update_data_capture_config(data_capture_config = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_capture_config}}{(sagemaker.model_monitor.DataCaptureConfig): The
DataCaptureConfig to update the predictor's endpoint to use.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-list_monitor"></a>}}
\if{latex}{\out{\hypertarget{method-list_monitor}{}}}
\subsection{Method \code{list_monitor()}}{
Generates ModelMonitor objects (or DefaultModelMonitors) based on the schedule(s)
             associated with the endpoint that this predictor refers to.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RealTimePredictor$list_monitor()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
[sagemaker.model_monitor.model_monitoring.ModelMonitor]: A list of
             ModelMonitor (or DefaultModelMonitor) objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RealTimePredictor$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
